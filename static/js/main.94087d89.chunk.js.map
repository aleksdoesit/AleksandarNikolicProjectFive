{"version":3,"sources":["Components/Header.js","Components/firebase.js","Components/Popup.js","Components/Notes.js","Components/CreateNote.js","Components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Popup","props","handleBody","event","setState","userNote","target","value","handleAuthor","userAuthor","state","notes","handleSubmit","bind","preventDefault","dbRef","database","ref","completeNote","this","push","className","onSubmit","onChange","name","required","rows","cols","minLength","maxLength","type","placeholder","onClick","closePopup","React","Notes","console","log","notesArray","map","noteBody","CreateNote","showPopup","togglePopup","Body","on","result","data","val","noteArray","key","noteId","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4OAceA,G,6KAVP,OACI,gCACI,yBAAKC,MAAM,iBACX,yD,GALKC,c,6BCYrBC,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAKIR,QAAf,ECoCeS,E,kDAhDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IASVC,WAAa,SAACC,GACV,EAAKC,SAAS,CACVC,SAAUF,EAAMG,OAAOC,SAZZ,EAgBnBC,aAAe,SAACL,GACZ,EAAKC,SAAS,CACVK,WAAYN,EAAMG,OAAOC,SAhB7B,EAAKG,MAAQ,CACTC,MAAO,GACPN,SAAS,GACTI,WAAY,IAEhB,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBAPL,E,yDAsBNV,GACTA,EAAMW,iBACN,IAAMC,EAAQxB,EAASyB,WAAWC,MAC5BC,EAAe,CACjBb,SAAUc,KAAKT,MAAML,SACrBI,WAAYU,KAAKT,MAAMD,YAE3BM,EAAMK,KAAKF,K,+BAIX,OACI,yBAAKG,UAAU,SACX,yBAAKA,UAAU,iBACX,0BAAMC,SAAUH,KAAKP,cACjB,8BAAUL,MAAOY,KAAKT,MAAMH,MAAOgB,SAAUJ,KAAKjB,WAAYsB,KAAK,WAAWC,SAAS,WAAWC,KAAK,IAAIC,KAAK,KAAKC,UAAU,IAAIC,UAAU,QAC7I,2BAAON,SAAUJ,KAAKX,aAAcsB,KAAK,OAAON,KAAK,aAAaC,SAAS,WAAWM,YAAY,6BACtG,4BAAQxB,MAAM,UAAd,QACA,4BAAQyB,QAASb,KAAKlB,MAAMgC,YAA5B,iB,GAzCAC,IAAM5C,WCYX6C,MAbf,SAAelC,GAEX,OADAmC,QAAQC,IAAIpC,GAER,4BACKA,EAAMqC,WAAWC,KAAI,SAAC5B,GACnB,OACI,4BAAI,2BAAIA,EAAM6B,SAASnC,UAAa,2BAAIM,EAAM6B,SAAS/B,kBC4B5DgC,E,kDA5BX,WAAYxC,GAAQ,IAAD,8BACf,cAAMA,IACDS,MAAQ,CACTgC,WAAW,GAHA,E,0DAQfvB,KAAKf,SAAS,CACVsC,WAAYvB,KAAKT,MAAMgC,c,+BAK3B,OACI,6BACA,4BAAQV,QAASb,KAAKwB,YAAY9B,KAAKM,OAAvC,mBACCA,KAAKT,MAAMgC,UACZ,kBAAC,EAAD,CACIT,WAAYd,KAAKwB,YAAY9B,KAAKM,QAEpC,U,GAtBW7B,aCgCVsD,E,kDA/BX,aAAc,IAAD,8BACT,gBACKlC,MAAQ,CACTC,MAAO,IAHF,E,gEAOQ,IAAD,OACFpB,EAASyB,WAAWC,MAC5B4B,GAAG,SAAS,SAACC,GACnB,IAAMC,EAAOD,EAAOE,MACdC,EAAY,GAClB,IAAK,IAAIC,KAAOH,EACZE,EAAU7B,KAAK,CAAEoB,SAAUO,EAAKG,GAAMC,OAAQD,IAE9C,EAAK9C,SAAS,CACNO,MAAOsC,S,+BAMnB,OACI,0BAAM5D,MAAM,WACR,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOiD,WAAYnB,KAAKT,MAAMC,a,GA3B3BrB,aCUJ8D,E,uKATb,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALY9D,aCOE+D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.94087d89.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Header extends Component {\n    render(){\n        return (\n            <header>\n                <div class=\"headerWrapper\">\n                <h1>Whats on your mind?</h1>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import firebase from 'firebase/app'\nimport 'firebase/database'\n\n  // Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBJ7dHP4cc4-xMfetx21dWN532lFrJgnmk\",\n    authDomain: \"noteapp-ac5ae.firebaseapp.com\",\n    databaseURL: \"https://noteapp-ac5ae.firebaseio.com\",\n    projectId: \"noteapp-ac5ae\",\n    storageBucket: \"noteapp-ac5ae.appspot.com\",\n    messagingSenderId: \"331562649080\",\n    appId: \"1:331562649080:web:f724d970bdc7c9d8da420d\"\n};\n  // Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase","import React from 'react';\nimport firebase from './firebase';\n\nclass Popup extends React.Component {  \n    constructor(props) {\n        super(props)\n        this.state = {\n            notes: [],\n            userNote:'',\n            userAuthor: ''\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleBody = (event) => {\n        this.setState({\n            userNote: event.target.value,\n        })\n    }\n\n    handleAuthor = (event) =>  {\n        this.setState({\n            userAuthor: event.target.value\n        })\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        const dbRef = firebase.database().ref()\n        const completeNote = {\n            userNote: this.state.userNote,\n            userAuthor: this.state.userAuthor\n        }\n        dbRef.push(completeNote)\n    }\n\n    render() {  \n        return (  \n            <div className='popup'>  \n                <div className='popup\\_inner'>  \n                    <form onSubmit={this.handleSubmit}>\n                        <textarea value={this.state.value} onChange={this.handleBody} name=\"noteBody\" required=\"required\" rows=\"5\" cols=\"10\" minLength=\"3\" maxLength=\"280\"></textarea>\n                        <input onChange={this.handleAuthor} type=\"text\" name=\"noteAuthor\" required=\"required\" placeholder=\"Please enter a your name\"/>\n                    <button value=\"Submit\">Post</button>\n                    <button onClick={this.props.closePopup}>Cancel</button>  \n                    </form>\n                </div>  \n            </div>  \n        );  \n    }  \n}  \n\nexport default Popup;","import React from 'react'\n\nfunction Notes(props) {\n    console.log(props);\n    return(\n        <ul>\n            {props.notesArray.map((notes) => {\n                return (\n                    <li><p>{notes.noteBody.userNote}</p><p>{notes.noteBody.userAuthor}</p></li>\n                )\n            })  }\n        </ul>\n    )\n}\n\nexport default Notes","import React, { Component } from 'react';\nimport Popup from './Popup';\nimport Notes from './Notes'\n\n// Bind button on click to create a popup div with form elements and a save button\n// Wire save button to close popup and update firebase\n\nclass CreateNote extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showPopup: false\n        };\n    }\n\n    togglePopup() {\n        this.setState({\n            showPopup: !this.state.showPopup\n        });\n    }\n\n    render() {\n        return (\n            <div>\n            <button onClick={this.togglePopup.bind(this)}>Create New Note</button>\n            {this.state.showPopup ?  \n            <Popup\n                closePopup={this.togglePopup.bind(this)}  \n            />  \n            : null  \n            }\n            </div>\n        );\n    }\n}\n\nexport default CreateNote;","import React, { Component } from 'react'\nimport CreateNote from './CreateNote'\nimport firebase from './firebase';\nimport Notes from './Notes'\n\n\nclass Body extends Component {\n\n    constructor(){\n        super()\n        this.state = {\n            notes: []\n        }\n    }\n\n    componentDidMount() {\n        const dbRef = firebase.database().ref();\n        dbRef.on('value', (result) => {\n        const data = result.val();\n        const noteArray = []\n        for (let key in data){\n            noteArray.push({ noteBody: data[key], noteId: key })\n            }\n            this.setState({\n                    notes: noteArray\n                })\n            })\n        }\n\n    render(){\n        return (\n            <main class=\"wrapper\">\n                <CreateNote />\n                <Notes notesArray={this.state.notes}/>\n            </main>\n        )\n    }\n}\n\nexport default Body;","import React, { Component } from 'react';\nimport './styles/styles.scss';\nimport Header from './Components/Header'\nimport Body from './Components/Body'\n\nclass App extends Component {\n  render() {\n  return (\n    <>\n      <Header />\n      <Body />\n    </>\n  );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}